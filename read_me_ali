:composer create-project symfony/website-skeleton AgenceImmo

.env.local

:symfony serve

video 2 =>   https://www.youtube.com/watch?v=TjHRk1Kk4JI  (jusqu'au 2 premiers pages et nav bar bootstrap premier partie)

go to routes.yaml

video 3 =>   https://www.youtube.com/watch?v=Gv7EUDzq2Z8

Create your database : php bin/console doctrine:database:create

make your first entity/database table : php bin/console make:entity => create table :Property and add some champs title, description.

lance : php bin/console make:migration    and    :php bin/console doctrine:migrations:migrate. now check in phpMyAdmin

go to Entity / Property.php at sold @ORM, here we will add option {false}. it means par default it show not house is not sold. but when will will change something in database we need to delete Migration  / version and regenerate by : php bin/console make:migration.

now we will insert all informationin our property entity/ table in database by ->set method in Controller / PropertyController at our index function. let's go there!

how to use slugify: composer require cocur/slugify
                   in Entity / Property.php place   use Cocur\Slugify\Slugify;
                   make a getSlug function after setTitle and place it in view.


                                Admin

Create a new Admin / PropertyController.php

make your namespace App\Controller\Admin and use of AbstractController  

create function __construct()

create function index()

create the view of admin in Admin / index.html.twig 

createa form with : bin/console make:form => PropertyType => Property

now go to AdminPropertycontroller and add function createForm() inside the function edit and add use App\Form\PropertyType;

Now go to Admin / edit.html.twig and generate this form by form_start / form_end 

To pimp your form, now go to config / packages / twig.yaml and add form_themes : ['bootstrap_4_layout.html.twig']

To translate your form add 'translation_domain' => 'forms' at Form / PropertyType.php, function configureOptions()
    => create tests / translations / form.fr.yaml

To process function edit() go to Admin / AdminPropertyController in edit function and add some come as handleRequest

Create _fomr.html.twig, copy the form from edit.html.twig and paste here 

now go to AdminPropertycontroller and add function delete() 
now go to index.html.twig and add tiny delete form just after the edit button and add token to securise the delete method 
let check by F12 to verify the presence our token and go to the function delete() and add the security supp
and add reconfermation message in index.html.twig inside the <form.....>
add some message confirmation to create and edit function by $this->addFlush() in our AdminPropertyController

Now we will add validation process to our form min or max ect.. so let's go to Entity / Property.php and add this use Symfony\Component\Validator\Constraints as Assert;
add in annotation as like * @Assert\Range(min=10, max=400)

to avoid from double creation for our admin we will add use Symfony\Bridge\Doctrine\Validator\Constraints\uniqueEntity; and add @UniqueEntity("title) just before class Property{} 

                    Security or firewall
The bundle security is already installed by default when we create our project by --full

now go to config / package / security.yaml and personalise your admin/user login system

make your User entity/table to save our login name and password : bin/console make:entity User => username => password

make migration : bin/console make:migration

now go to security.yaml and add your config from_database:
                                                    entity:
                                                        class: App\Entity\User
                                                        property: username or email

now go to Entity / User.php and add implements UserInterface,\Serializable with getRoles(), getSalt(), eraseCredentials(), serialize(), unserialize().

now create Controller / SecurityController.php
create security/login.html.twig and add login form
now in security.yaml add form_login:
                            check_path: login 

For logout add logout:
                path: /logout
                target: / 
        and add a route in routes.yaml
                logout:
                    path: /logout

Now go to security.yaml and crypte the encoders:
now fill your database with fixture by : bin/console make:fixture

again launch bin/console make:fixture => UserFixtures and go there to customize and 
launch bin/console doctrine:fixture:load

                        paginer les biens / filled automaticly by fixture
: bin/console make:fixture => PropertyFixture 
: composer require fzaninotto/faker  and go to  edit this PropertyFixtures 

now to go PropertyController and edit for to show all houses in in our page "Acheter"
go to Property / index.html.twig and connect to show

launch : composer require knplabs/knp-paginator-bundle
create packages / knp_paginator.yml
copy and paste the configaration example yaml from git gub of knp paginator
go to PropertyRipository.php and modify the findAllVisible to Query
go to PropertyController.php and add parameter paginator interface in function index 
place {{ knp_pagination_render(pagination) }} in index.html.twig

now go to config / packages / test / knp_paginator.yml and modify templates: pagination: line 

                
                        Basic filtre 
                To create an entity / table for research
                To create a form for research
                add or modify in controller

Create a class manually in Entity / PropertySearch.php
run: bin/console make:form => PropertySearchType => \App\Entity\PropertySearch 
now go to Form / PropertySearchType and edit
now go to PropertyController.php and index.html.twig and edit
Go to PropertySearchType.php and add function getBlockPrefix()
go to PropertyController.php, place $search as parameter in function index() => findAllVisibleQuery($search) and now go to Propertyrepository.php =>  to edit function findAllvisibleQuery()

go to Entity / PropertySearch and add Assert\range(min=10, max=400) with use for to show the limit in search bar par example (must be in 10 to 400)

                                Options / Relation (Many to many)
:run bin/console make:entity => Option => name => enter => enter => Properties => relation => Property => ManyTomany => yes => Options
run : php bin/console make:migration

make CRUD of Entity / table Option, run:  bin/console make:crud Option
Check in your navigator by localhost:8000/option and add some Options
Now drag your OptionController.php and place it to  Admin / OptionController.php and rename it to AdminOptionController.php, no inside and change the class and route and namespace and render in functions, add (admin/), remove function show()
Now delete all files in templates / admin and copy, paste from template / Property to admin and do some little modifications and check all crud

Now go to Form / PropertyType.php and add(options,EntityType::class) use  

now go to entity / Property.php at option @ORM and replace mappedBy by inversedBy and in Option.php replaced inversedBy by mappedBy

Now we will add some JS animation for our options by (select2), so type cdnjs at google => search select 2 => https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/css/select2.min.css    https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.min.js  copy and paste at base.html.twig
check and place corectly all block script and stylesheets aftre twitter.bootstrap

now we will add options to our search bar for clients
Go to Form / PropertySearchType add Option 
Go to Entity / PropertySearch.php and add private options => getter and setter with function __construct
Go to property / index.html.twig and add options form

Go to Propertyrepository and connect options with property search bar

                                    Vich upload / photo

Go to flexsymfony.com and => upload => vich/uploader-bundle 
run: composer require vich/uploader-bundle
Go to Packages / test / vich_uploader.yaml and edit 
Go to package / vich_uploader.yaml  and edit
Now go to Entity / property.php and edit go to the documentation copy and paste priivate,  getter and setter, annotation and use
Go to Form / PropertyType and add ->add() and use
Go to property / _form.html.twig and add the image upload form line
run : bin/console make:migration and check in navigator

Now we will make unique id for our images, go to flexsymfony.com => github of vich_uploader => namer.md => copy Vich\uploaderBundle\naming\uniqidName;
Go to vich_uploader.yaml and add namer: Vich\UploaderBundle\Naming\UniqidNamer 
check it in navigator and public / images
Now to show the image in our products pages go to  property / _property.html.twig and add

Now we redimension our images, go to flexsymfony.com => imag without (e)!
:run composer require liip/imagine-bundle
Go to config / package / liip_imagine.yaml and edit => #### now go to property /  _property.html.twig and add this filter in  img src !!

now we will add the image format ristriction as like jpeg, png, go to Property.php and in private imageFile add @Assert

######now we will make a logic that when we will remove images from products, automaticlly image shound be remove from cache
go to Admin / AdminPropertyController and make this logic in function edit
check it in the navigator###
OR
##Go to doctrine documentation => ORM => 2.6 => Events => Entity listener##
But we will use another method to do this and we will make our subscriberListener to get empty our cache after remove any picture
Create Src / Listener / ImageCacheSubsriber.php
 Go to service.yaml and add App\listener\ImageCacheSubscriber: line below


